-- 날짜 실습 (가장 위에서)
-- 오늘에서 하루를 더해라.
SELECT SYSDATE -- 오늘
	 , SYSDATE - 1 -- 하루 전
	 , SYSDATE + 1 -- 하루 후
	 , SYSDATE - 2 -- 이틀 전
	 , SYSDATE + 2 -- 이틀 후
	 , ADD_MONTHS(SYSDATE, -1) -- 한달 전
	 , ADD_MONTHS(SYSDATE, 1) -- 한달 후
	 , ADD_MONTHS(SYSDATE, -2) -- 두달 전
	 , ADD_MONTHS(SYSDATE, 2) -- 두달 후
	 , ADD_MONTHS(SYSDATE, -3 * 12) -- 3년 전
	 , ADD_MONTHS(SYSDATE, 3 * 12) -- 3년 후
	 , SYSDATE -1 /24 -- 1시간 전
	 , SYSDATE +1 /24 -- 1시간 후
	 , SYSDATE -3 /24 -- 3시간 전
	 , SYSDATE +3 /24 -- 3시간 후
	 , SYSDATE -10 /24 /60 -- 10분 전
	 , SYSDATE +10 /24 /60 -- 10분 후
	 , SYSDATE -30 /24 /60 /60 -- 30초 전
	 , SYSDATE +30 /24 /60 /60  -- 30초 후
  FROM DUAL
;
-- 오늘에서 하루를 빼라.
-- 오늘에서 한달을 더해라.
-- 오늘에서 두달을 빼라.
-- 오늘에서 3년을 더해라.
-- 오늘에서 3년을 빼라.
-- 오늘에서 1시간을 더하고 빼라.
-- 오늘에서 3시간을 더하고 빼라.
-- 오늘에서 10분을 더하고 빼라.
-- 오늘에서 30초를 더하고 빼라.




-- 날짜 -> 문자 사용 함수 TO_CHAR(날짜타입의 컬럼, '포멧')
-- 문자 -> 날짜 사용 함수 TO_DATE(문자타입의 컬럼 혹은 값, '포멧')

-- 1. 현재 시간을 조회한다.
SELECT SYSDATE
  FROM DUAL -- DUMMY TABLE (row가 하나만 존재하는 의미 없는 테이블)
;
-- 2. 현재 시간을 "연-월-일" 포멧으로 조회한다.
SELECT TO_CHAR(SYSDATE)	-- BUG (이렇게 사용하면 안됨 -> 실제 웹서버에서는 해당 sql은 에러를 일으킴.)
	 , TO_CHAR(SYSDATE, 'YYYY-MM-DD') -- 정상.
  FROM DUAL
;
-- 3. 한 시간 전 시간을 "시:분:초" 포멧으로 조회한다.
SELECT TO_CHAR(SYSDATE, 'HH:MI:SS') -- 12시간 베이스
	 , TO_CHAR(SYSDATE, 'HH24:MI:SS') -- 24시간 베이스
  FROM DUAL
;

-- 4. EMPLOYEES 테이블의 모든 정보를 조회한다.
SELECT * -- *의 의미: 모든 컬럼을 의미한다.
  FROM EMPLOYEES
;
-- 4.1 EMPLOYEES 테이블에서 first_name으로 오름차순 정렬하기
SELECT *
  FROM EMPLOYEES
 ORDER BY FIRST_NAME ASC
;
-- 4.2 EMPLOYEES 테이블에서 LAST_NAME으로 내림차순 정렬하기
SELECT *
  FROM EMPLOYEES
 ORDER BY LAST_NAME DESC
;
-- 4.3 EMPLOYEES 테이블에서 FIRST_NAME으로 오름차순 정렬, LAST_NAME으로 내림차순 정렬.
-- 	   FIRST_NAME으로 오름차순 정렬된 상태에서, LAST_NAME만 내림차순 정렬 수행.
SELECT *
  FROM EMPLOYEES
 ORDER BY FIRST_NAME ASC -- 1차 정렬
 	 , LAST_NAME DESC
;
-- ORDER BY의 주의점, --> 데이터의 수가 굉장히 많은 테이블에서 
--					   ORDER BY를 수행하면 성능이 기하급수적으로 느려진다.
--					   실무에서는 가급적이며내 정렬 X, 정말 필요할 때에만 정렬 수행

-- 5. DEPARTMENTS 테이블의 모든 정보를 조회한다.
SELECT *
  FROM DEPARTMENTS
;
-- 6. JOBS 테이블의 모든 정보를 조회한다.
SELECT *
  FROM JOBS
;
-- 7. LOCATIONS 테이블의 모든 정보를 조회한다.
SELECT *
  FROM LOCATIONS
;
-- 8. COUNTRIES 테이블의 모든 정보를 조회한다.
SELECT *
  FROM COUNTRIES
;
-- 9. REGIONS 테이블의 모든 정보를 조회한다.
SELECT *
  FROM REGIONS
;  

-- 10. JOB_HISTORY 테이블의 모든 정보를 조회한다.
SELECT *
  FROM JOB_HISTORY 
;

-- 11. 90번 부서에서 근무하는 사원들의 모든 정보를 조회한다.
-- 11. employees 테이블에서 department_id가 90인 사원의 모든 컬럼을 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE DEPARTMENT_ID = 90
;


-- 12. 90번, 100번 부서에서 근무하는 사원들의 모든 정보를 조회한다.
-- 12. EMPLOYEES 테이블에서 DEPARTMENT_ID가 90이거나 100인 모든 컬럼을 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE DEPARTMENT_ID = 90
    OR DEPARTMENT_ID = 100
;

-- 13. 100번 상사의 직속 부하직원의 모든 정보를 조회한다.
-- 13. EMPLOYEES 테이블에서 MANAGER_ID가 100인 모든 컬럼을 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE MANAGER_ID = 100
;

-- 14. 직무 아이디가 AD_VP 인 사원의 모든 정보를 조회한다.
-- 14. EMPLOYEES 테이블에서 JOB_ID가 'AD_VP'인 모든 컬럼을 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID = 'AD_VP'
;

-- 15. 연봉이 7000 이상인 사원의 모든 정보를 조회한다.
-- 15. EMPLOYEES 테이블에서 SALARY가 7000보다 큰 모든 컬럼을 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE SALARY >= 7000
 ORDER BY SALARY ASC 
;

-- 15-1. EMPLOYEES 테이블에서 SALARY가 7000이상이고
--		 JOB_ID가 'IT_PROG' 이며 
--		 DEPARTMENT_ID가 60인 모든 컬럼을 조회한다.
-- 		 SARARY를 기준으로 내림차순 정렬을 한다.
-- 정렬 : ORDER BY
-- ORDER BY는 반드시 SQL에 가장 마지막에 작성해야한다.
SELECT *
  FROM EMPLOYEES
 WHERE SALARY >= 7000
   AND JOB_ID = 'IT_PROG'
   AND DEPARTMENT_ID = 60 
 ORDER BY SALARY DESC 
;

-- 15-2. DEPARTMENT(부서정보) 테이블에서 DEPARTMENT_ID (부서 번호)가 60인
-- 		 DEPARTMENT_NAME만 조회한다.
SELECT DEPARTMENT_NAME
  FROM DEPARTMENTS
 WHERE DEPARTMENT_ID = 60 
;

-- 16. 2005년 09월에 입사한 사원들의 모든 정보를 조회한다.
--  2005년 9월 1일 부터 2005년 9월 30일 사이에 입사한 사람들의 정보를 조회. ==> 기간 검색
--		BETWEEN a AND b
--		BETWEEN TO_DATE(???,???) AND TO_DATE(????,????)
/*
 * 숫자타입의 컬럼: 123 숫자 비교
 * 문자타입의 컬럼: ''  문자 비교
 * 날짜타입의 컬럼: ??  날짜 비교
 */
SELECT SYSDATE
     , TO_DATE('2005-09-01', 'YYYY-MM-DD') 
  FROM DUAL
;

SELECT *
  FROM EMPLOYEES
 WHERE HIRE_DATE BETWEEN TO_DATE('2005-09-01', 'YYYY-MM-DD') AND TO_DATE('2005-09-30','YYYY-MM-DD')
 ORDER BY HIRE_DATE DESC 
;

-- 17. 111번 사원의 모든 정보를 조회한다.



-- 18. 인센티브를 안받는 사원들의 모든 정보를 조회한다.
-- 18. EMPLOYEES 테이블에서 COMMISSION_PCT의 값이 NULL인 모든 컬럼을 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE COMMISSION_PCT IS NULL 
;

/*
 * 실습 문제
 * 1. EMPLOYEES 테이블에서 JOB_ID가 SA_MAN이거나, SA_REP이거나, IT_PROG인 데이터 중
 *    SALARY가 10,000 이상인 데이터 중
 *    MANAGER_ID가 100인 데이터의 FITST_NAME, LAST_NAME, EMPLOYEE_ID 컬럼을 조회
*/
SELECT FIRST_NAME
	 , LAST_NAME 
	 , EMPLOYEE_ID 
  FROM EMPLOYEES
 WHERE JOB_ID IN ('SA_MAN', 'SA_REP','IT_PROG')
   AND SALARY >= 10000
   AND MANAGER_ID = 100
;

/*
 * 2. EMPLOYEES 테이블에서 DEPARTMENT_ID가 10 ~ 60 사이인 데이터 중
 *    SALARY가 10,000미만인 데이터를 SALARY 기준으로 내림차순 정렬해서 모든 컬럼을 조회.
 */
SELECT *
  FROM EMPLOYEES
 WHERE DEPARTMENT_ID BETWEEN 10 AND 60
   AND SALARY < 10000
 ORDER BY SALARY DESC
;

/*
 * 3. EMPLOYEES 테이블에서 SALARY가 11,000이상인 데이터 중에서 
 *    COMMISSION_PCT가 0.2 이상인 데이터를 COMMISSION_PCT를 기준으로 오름차순 정렬
 *    SALARY를 기준으로 내림차순 정렬해여 모든 컬럼을 조회. 
 */
SELECT *
  FROM EMPLOYEES
 WHERE SALARY >= 11000
   AND COMMISSION_PCT >= 0.2
 ORDER BY COMMISSION_PCT
 	 , SALARY DESC
 ;


-- 19. 인센티브를 받는 사원들의 모든 정보를 조회한다.
-- 19. EMPLOYEES 테이블에서 COMMISSION_PCT의 값이 NULL이 아닌 모든 컬럼을 조회한다.
--     IS NOT NULL을 이용하면 된다.
SELECT *
  FROM EMPLOYEES
 WHERE COMMISSION_PCT IS NOT NULL
;

-- 20. 이름의 첫 글자가 'D' 인 사원들의 모든 정보를 조회한다.
-- 20. EMPLOYEES 테이블에서 FIRST_NAME 컬럼 값이 D로 시작하는 데이터의 모든 컬럼을 조회
/*
 * 포함, 시작, 끝 검색
 * % 사용.
 * 
 * COLUMN LIKE 'D%' --> 컬럼의 값이 D로 시작한다.
 * COLUMN LIKE '%D' --> 컬럼의 값이 D로 끝난다.
 * COLUMN LIKE '%D%' --> 컬럼의 값이 D로 시작하거나, D로 끝나거나, 중간에 D가 존재한다.[컬럼에 D가 존재]
 */
SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE 'D%'
;

-- 21. 성의 마지막 글자가 'a' 인 사원들의 모든 정보를 조회한다.
-- 21. EMPLOYEES 테이블에서 LAST_NAME의 값이 a로 끝나는 모든 컬럼을 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE LAST_NAME LIKE '%a'
;

-- 22. 전화번호에 '.124.'이 포함된 사원들의 모든 정보를 조회한다.
-- 22. EMPLOYEES 테이블에서 PHONE_NUMBER의 값에 .124.이 포함된 모든 컬럼을 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE PHONE_NUMBER LIKE '%.124.%'
;

/**
 * COL LIKE '%A%' --> COL에 대문자A가 포함되어있는가?
 * COL NOT LIKE '%A%' --> COL에 대문자A가 포함되어 있지 않은가?
 * 
 * COL IN (10, 20, 30) --> COL의 값이 10, 20, 30 중에 하나인가?
 * COL NOT IN (10, 20 , 30) --> COL의 값이 10, 20, 30 모두 아닌가?
 * 
 * COL BETWEEN A AND B --> COL의 값이 A와 B사이인가?
 * COL NOT BETWEEN A AND B --> COL의 값이 A와 B사이가 아닌가?
 */


-- 실습문제.
-- 4. EMPLOYEES 테이블에서 FIRST_NAME 혹은 LAST_NAME에 'e'또는 'E'가 포함된 데이터의
--		모든 컬럼을 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE '%E%'
    OR FIRST_NAME LIKE '%e%'
    OR LAST_NAME LIKE '%E%'
    OR LAST_NAME LIKE '%e%'
;


-- 집계 함수 실습
-- 개수세기 - COUNT(COLUMN)
-- EMPLOYEES 테이블에 몇개의 ROW가 있냐?
SELECT COUNT(EMPLOYEE_ID) -- 실무에서 정말 이렇게 개수를 세는가?? 이 PK로 개수를 세는 방법은 사용하지 않음
  FROM EMPLOYEES
;

SELECT SYSDATE -- 테이블의 ROW 개수만큼 결과가 나온다!
  FROM EMPLOYEES -- 107개 항목을 보유
;

SELECT COUNT(1)
  FROM EMPLOYEES
;

-- EMPLOYEES 테이블에서 DEPARTMENT_ID가 90인것은 몇 개가 있는가?
SELECT COUNT(1)
  FROM EMPLOYEES
 WHERE DEPARTMENT_ID = 90
;

-- 최대연봉 - MAX()
SELECT MAX(SALARY)
  FROM EMPLOYEES
;

-- 가장 늦게 입사한 날짜
SELECT MAX(HIRE_DATE)
  FROM EMPLOYEES
;

-- 최소연봉
SELECT MIN(SALARY)
  FROM EMPLOYEES
;

-- 가장일찍 입사한 날짜
SELECT MIN(HIRE_DATE)
  FROM EMPLOYEES
;

-- 평균연봉
SELECT AVG(SALARY) -- 6461.831775700934579439252336448598130841
  FROM EMPLOYEES
;

-- 연봉총합
SELECT SUM(SALARY) -- 
  FROM EMPLOYEES
;

-- 개수, 최대연봉, 최소연봉, 가장 늦게 입사한 날짜, 가장 먼저 입사한 날짜, 평균 연봉, 연봉 총 합
SELECT COUNT(1)
     , MAX(SALARY)
     , MIN(SALARY)
     , MAX(HIRE_DATE)
     , MIN(HIRE_DATE)
     , AVG(SALARY)
     , SUM(SALARY)
  FROM EMPLOYEES
;

-- EMPLOYEES 테이블에서 DEPARTMENT_ID별로 최대 연봉과 최저 연봉을 조회한다.
-- 조회해야하는 칼럼
--  1. DEPARTMENT_ID
--  2. 최대 연봉
--  3. 최저 연봉
-- GROUP BY가 포함된 쿼리에서는 *를 쓸 수 없다.  
SELECT DEPARTMENT_ID
     , MAX(SALARY)
     , MIN(SALARY)
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID 
;

-- EMPLOYEES 테이블에서 DEPARTMENT_ID + JOB_ID별로 최대 연봉과 최저 연봉을 조회한다.
-- 조회해야하는 칼럼
--  1. DEPARTMENT_ID
--  2. JOB_ID
--  3. 평균 연봉
SELECT DEPARTMENT_ID 
     , JOB_ID
     , AVG(SALARY) 
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID , JOB_ID 
; 

--GROUP BY 주의점
/*
 * GROUP BY => 테이블을 기준에 따라 임시테이블로 쪼개는 키워드
 * 테이블에 굉장히 많은 ROW가 있을 때 GROUP BY를 사용하게되면
 * 성능이 무지막지하게 떨어진다. => 사용하지 않는다.
 * (집계를 위해 OSQL을 쓰는게 맞다. CASSANDRA, MONGO DB 등등)
 */

-- 23. 직무 아이디가 'PU_CLERK'인 사원 중 연봉이 3000 이상인 사원들의 모든 정보를 조회한다.

-- 24. 평균 연봉보다 많이 받는 사원들의 사원번호, 이름, 성, 연봉을 조회한다.
-- EMPLOYEES 테이블에서 EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY조회,
-- 조건 : SALARY > 평균연봉
--  평균 연봉이 얼마인지 모름.
-- 먼저 할 것 --> 얼마인지 모르는 평균 연봉을 먼저 구하자.
SELECT AVG(SALARY) 
  FROM EMPLOYEES
;

SELECT EMPLOYEE_ID 
  FROM EMPLOYEES
 WHERE SALARY > (SELECT AVG(SALARY)
 				   FROM EMPLOYEES)
;


-- 25. 평균 연봉보다 적게 받는 사원들의 사원번호, 연봉, 부서번호를 조회한다.
SELECT EMPLOYEE_ID
     , SALARY 
     , DEPARTMENT_ID
  FROM EMPLOYEES
 WHERE SALARY < (SELECT AVG(SALARY)
 				   FROM EMPLOYEES)
  
;
-- 26. 가장 많은 연봉을 받는 사원의 사원번호, 이름, 연봉을 조회한다.
SELECT EMPLOYEE_ID 
     , FIRST_NAME 
     , SALARY
  FROM EMPLOYEES
 WHERE SALARY = (SELECT MAX(SALARY)
                   FROM EMPLOYEES)
;
-- 27. 이름이 4글자인 사원의 모든 정보를 조회한다.
-- 27. EMPLOYEES 테이블에서 FIRST_NAME의 길이가 4글자인 데이터의 모든 컬럼을 조회한다.
-- LIKE, 글자의 수를 체크하는 와일드카드: _ (언더바)
/*
 * COL LIKE '__' --> COL의 값이 두 글자인가?
 * 
 * COL LIKE 'A__%' --> COL의 값이 A로 시작해서 두 글자 이상이 더 있는가?
 */
                   
SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE '____%'
;

-- 28. 'SA_REP' 직무인 직원 중 가장 높은 연봉과 가장 낮은 연봉을 조회한다.
-- 28. 직무아이디 == JOB_ID
-- TODO
SELECT JOB_ID
	 , MAX(SALARY)
     , MIN(SALARY)
  FROM EMPLOYEES
 GROUP BY JOB_ID 
;

-- 29. 직원의 입사일자를 '연-월-일' 형태로 조회한다.
-- 29. 입사일자 == HIRE_DATE
-- TODO
SELECT TO_CHAR(HIRE_DATE, 'YYYY-MM-DD') 
  FROM EMPLOYEES
;

-- 30. 가장 늦게 입사한 사원의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE HIRE_DATE = (SELECT MAX(HIRE_DATE)
                      FROM EMPLOYEES)
;                      

-- 31. 가장 일찍 입사한 사원의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE HIRE_DATE = (SELECT MIN(HIRE_DATE)
 					  FROM EMPLOYEES)
;

-- 32. 자신의 상사보다 더 많은 연봉을 받는 사원의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES EMP -- 부하직원
 WHERE MANAGER_ID = (SELECT MAN.EMPLOYEE_ID
 					   FROM EMPLOYEES MAN -- 상사직원
 					  WHERE EMPLOYEE_ID = EMP.MANAGER_ID
 					    AND MAN.SALARY < EMP.SALARY) -- 상사의 번호가 100번
;

SELECT *
  FROM EMPLOYEES EMP
 WHERE EMP.SALARY > (SELECT SALARY 
 					   FROM EMPLOYEES MAN
 					  WHERE MAN.EMPLOYEE_ID = EMP.MANAGER_ID)
; 

SELECT EMP.FIRST_NAME
	 , EMP.LAST_NAME
	 , EMP.SALARY
	 , MAN.FIRST_NAME 
	 , MAN.LAST_NAME
	 , MAN.SALARY 
  FROM EMPLOYEES EMP
 INNER JOIN EMPLOYEES MAN
    ON EMP.MANAGER_ID = MAN.EMPLOYEE_ID 
 WHERE EMP.SALARY > MAN.SALARY
;
-- 부하직원의 상사 번호는 상사정보의 사원번호와 같다.

-- 33. 자신의 상사보다 더 일찍 입사한 사원의 모든 정보를 조회한다.
SELECT EMP.*
     , MAN.HIRE_DATE
  FROM EMPLOYEES EMP
 INNER JOIN EMPLOYEES MAN
    ON EMP.MANAGER_ID = MAN.EMPLOYEE_ID 
 WHERE EMP.HIRE_DATE < MAN.HIRE_DATE 
;
-- SUB QUERY 이용버전
SELECT *
  FROM EMPLOYEES EMP
 WHERE EMP.HIRE_DATE < (SELECT MAN.HIRE_DATE 
 						  FROM EMPLOYEES MAN
 						 WHERE EMP.MANAGER_ID = MAN.EMPLOYEE_ID)
;

-- 34. 부서아이디별 평균 연봉을 조회한다.
-- 34. EMPLOYEES 테이블에서 DEPARTMENT_ID별로 평균 연봉(SALARY)를 조회한다.
SELECT DEPARTMENT_ID
     , AVG(SALARY) 
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
;
-- 35. 직무아이디별 평균 연봉, 최고연봉, 최저연봉을 조회한다.
-- 35. EMPLOYEES 테이블에서 JOB_ID 별로 평균 연봉 (SALARY), 최고연봉, 최저 연봉을 조회한다.
SELECT JOB_ID
     , AVG(SALARY)
     , MAX(SALARY)
     , MIN(SALARY) 
  FROM EMPLOYEES
 GROUP BY JOB_ID
;
-- 36. 가장 많은 인센티브를 받는 사원의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE COMMISSION_PCT = (SELECT MAX(COMMISSION_PCT) 
   		  				   FROM EMPLOYEES)
;
-- 37. 가장 적은 인센티브를 받는 사원의 연봉과 인센티브를 조회한다.

SELEC *
  FROM EMPLOYEES
 WHERE COMMISSION_PCT = (SELECT MIN(COMMISSION_PCT)
  						   FROM EMPLOYEES)
;
-- 38. 직무명별 사원의 수를 조회한다.
-- 38. EMPLOYEES 테이블에서 JOB_ID별로 ROW의 수를 조회한다.
SELECT JOB_ID
     , COUNT(1)
  FROM EMPLOYEES
 GROUP BY JOB_ID
;

-- 38-2. 직무명 별 사원의 수를 조회한다. 사원의 수가 없을 경우엔 0으로 조회한다.
SELECT J.JOB_TITLE 
     , NVL(COUNT(E.EMPLOYEE_ID), 0) EMP_COUNT
  FROM JOBS j 
  LEFT OUTER JOIN EMPLOYEES e 
    ON J.JOB_ID = E.JOB_ID
 GROUP BY J.JOB_TITLE 
;

-- 38-3. 국가명별 사원의 최소연봉과 최대연봉을 조회한다. 사원의 수가 없을 경우엔 0으로 조회한다.
SELECT C.COUNTRY_NAME 
     , NVL(MIN(E.SALARY), 0) AS MIN_SALARY
     , NVL(MAX(E.SALARY), 0) AS MAX_SALARY
  FROM COUNTRIES c 
  LEFT OUTER JOIN LOCATIONS l 
    ON C.COUNTRY_ID = L.COUNTRY_ID 
  LEFT OUTER JOIN DEPARTMENTS d 
    ON L.LOCATION_ID = D.LOCATION_ID 
  LEFT OUTER JOIN EMPLOYEES e 
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 GROUP BY C.COUNTRY_NAME 
;

SELECT C.COUNTRY_NAME 
     , NVL(MIN(EMP_DEPT.SALARY), 0) AS MIN_SALARY
     , NVL(MAX(EMP_DEPT.SALARY), 0) AS MAX_SALARY
  FROM COUNTRIES c  
  LEFT JOIN (SELECT *
  			   FROM EMPLOYEES e
  			   JOIN DEPARTMENTS d 
			     ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
			   JOIN LOCATIONS l
				 ON D.LOCATION_ID = L.LOCATION_ID) EMP_DEPT
    ON C.COUNTRY_ID = EMP_DEPT.COUNTRY_ID 
 GROUP BY C.COUNTRY_NAME				
;


-- 39. 상사아이디별 부하직원의 수를 조회한다. 단, 부하직원이 2명 이하인 경우는 제외한다.
-- 39. EMPLOYEES 테이블에서 MANAGER_ID로 ROW의 수를 조회한다.
--   	이때, ROW의 수가 2 이하인 경우는 제외 시킨다.(HAVING)
SELECT MANAGER_ID
     , COUNT(1)
  FROM EMPLOYEES
 GROUP BY MANAGER_ID 
HAVING COUNT(1) > 2 
;

-- 40. 사원이 속한 부서의 평균연봉보다 적게 받는 사원의 모든 정보를 조회한다.




-- 실습문제
-- 서브쿼리 조인문제.
-- 부서장의 사원번호가 100번인 부서에서 근무하는 사원들의 모든 정보를 조회한다.
-- 모르는 것: 부서장 사원번호가 100번인 부서의 번호.
-- 부서 ---근무---> 사원
-- 하나의 부서에서는 여러명의 사원이 근무중이다.
-- 부서의(pk)와 사원의 FK가 같으면 된다.

SELECT *
  FROM EMPLOYEES
 WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID 
   						   FROM DEPARTMENTS
  						  WHERE MANAGER_ID = 100)
;

-- 서브쿼리 조인문제
-- SEATTLE에 있는 부서의 모든 정보를 조회한다.
SELECT *
  FROM DEPARTMENTS
 WHERE LOCATION_ID = (SELECT LOCATION_ID
					    FROM LOCATIONS
 			           WHERE CITY = 'Seattle')
 ;

-- 'Salse Manager' 직무를 담당하고 있는 사원들의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID = (SELECT JOB_ID
  		  		   FROM JOBS
 	  	 		  WHERE JOB_TITLE = 'Sales Manager')
;
-- 'Americas' 대륙에 존재하는 국가들의 모든 정보를 조회한다.
SELECT *
  FROM COUNTRIES
 WHERE REGION_ID = (SELECT REGION_ID 
  					  FROM REGIONS
 					 WHERE REGION_NAME = 'Americas')
;

-- 'United States of America' 국가에 존재하는 모든 도시를 조회한다.
SELECT *
  FROM LOCATIONS
 WHERE COUNTRY_ID = (SELECT COUNTRY_ID 
  					   FROM COUNTRIES
 					  WHERE COUNTRY_NAME = 'United States of America')
;

-- 'Seattle' 도시에서 근무하는 모든 사원들의 정보를 조회한다.
-- 몰랐던 것
-- 1. Seattle의 지역번호
-- 2. Seattle에 있는 부서의 번호


-- IN이 아니라 =을 쓰는경우 DEPARTMENT_ID의 ROW가 여러개 나오기 때문에 IN을 사용한다.
--    (비교를 할 것이 여러개의 행으로 이루어져있기 때문에 =로 비교를 못함) 
SELECT *
  FROM EMPLOYEES
 WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID
  						  FROM DEPARTMENTS
 						 WHERE LOCATION_ID = (SELECT LOCATION_ID 
					    						FROM LOCATIONS
 			           						   WHERE CITY = 'Seattle'))
 ;

-- 'Sales Manager' 직무를 담당하는 사원들의 부서명을 조회한다.
SELECT DEPARTMENT_NAME 
  FROM DEPARTMENTS
 WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID 
  						  FROM EMPLOYEES
 						 WHERE JOB_ID = (SELECT JOB_ID 
  									       FROM JOBS
 			   						      WHERE JOB_TITLE = 'Sales Manager'))
;

-- INNER JOIN 실습
-- 모든 사원들의 사원 정보와 모든 부서 정보를 조회한다.
SELECT *
  FROM EMPLOYEES E
 INNER JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
; 
 
-- 41. 사원이 근무하는 부서명, 이름, 성을 조회한다.
SELECT D.DEPARTMENT_NAME
     , E.FIRST_NAME 
     , E.LAST_NAME
  FROM EMPLOYEES e 
 INNER JOIN DEPARTMENTS d 
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
;

-- 42. 가장 적은 연봉을 받는 사원의 부서명, 이름, 성, 연봉, 부서장사원번호를 조회한다.
-- SUB QUERY, INNER JOIN
SELECT D.DEPARTMENT_NAME
	 , E.FIRST_NAME 
	 , E.LAST_NAME 
	 , E.SALARY 
	 , D.MANAGER_ID 
  FROM EMPLOYEES e 
 INNER JOIN DEPARTMENTS d 
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 WHERE SALARY = (SELECT MIN(SALARY)
 				   FROM EMPLOYEES) 
;

-- 우리가 원하는 데이터의 형태는 어떠한가?
-- 상사아이디 	| 부하직원아이디
-- 100		| 101
-- 100		| 102
-- 180		| NULL
-- 메인		| 참조테이블
-- 부하직원이 없는 직원들만 조회한다.
SELECT *
  FROM EMPLOYEES MAN -- 상사
  LEFT OUTER JOIN EMPLOYEES EMP	--부하
    ON MAN.EMPLOYEE_ID = EMP.MANAGER_ID 
 WHERE EMP.EMPLOYEE_ID IS NULL
;

-- 상사의 부하직원의 수를 조회한다.
/*
 * 사원번호 	| 부하직원의 수
 * 100		| 2
 * 101		| 3
 * 170		| 0
 */
SELECT MAN.EMPLOYEE_ID
     , COUNT(EMP.EMPLOYEE_ID) AS EMP_COUNT 
  FROM EMPLOYEES MAN
  LEFT OUTER JOIN EMPLOYEES EMP
    ON MAN.EMPLOYEE_ID = EMP.MANAGER_ID 
 GROUP BY MAN.EMPLOYEE_ID
; 				   
 				   
SELECT *
  FROM EMPLOYEES MAN
  LEFT OUTER JOIN EMPLOYEES EMP
    ON MAN.EMPLOYEE_ID = EMP.EMPLOYEE_ID 
; 
 
-- 43. 상사사원번호를 중복없이 조회한다.
--SELECT E.EMPLOYEE_ID
--  FROM EMPLOYEES e 
-- INNER JOIN EMPLOYEES e2 
--    ON E.MANAGER_ID = E2.EMPLOYEE_ID 
SELECT DISTINCT MANAGER_ID
     , EMPLOYEE_ID
  FROM EMPLOYEES
 WHERE MANAGER_ID IS NOT NULL
; 				   

-- 44. 50번 부서의 부서장의 이름, 성, 연봉, 부서명을 조회한다.
SELECT E.FIRST_NAME
     , E.LAST_NAME 
     , E.SALARY
     , D.DEPARTMENT_NAME
  FROM EMPLOYEES e 
 INNER JOIN DEPARTMENTS d
    ON E.EMPLOYEE_ID = D.MANAGER_ID
 ;


-- 45. 부서명별 사원의 수를 조회한다.
-- 집계함수, GROUP BY, INNER JOIN
SELECT D.DEPARTMENT_NAME
	 , COUNT(1) 
  FROM EMPLOYEES e 
 INNER JOIN DEPARTMENTS d 
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 GROUP BY DEPARTMENT_NAME
;

-- 46. 사원의 수가 가장 많은 부서명, 사원의 수를 조회한다.

-- 47. 사원이 없는 부서명을 조회한다.
-- 사원 테이블 = DEPARTMENT_ID
-- 부서 테이블 = DEPARTMENT_ID
SELECT *
  FROM DEPARTMENTS
 WHERE DEPARTMENT_ID NOT IN (SELECT DEPARTMENT_ID
                 	       	   FROM EMPLOYEES
                 	       	  WHERE DEPARTMENT_ID IS NOT NULL)
;
SELECT *
  FROM EMPLOYEES
;

-- 48. 직무가 변경된 사원의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES
 WHERE EMPLOYEE_ID IN (SELECT EMPLOYEE_ID
 						 FROM JOB_HISTORY)
;
-- 49. 직무가 변경된적 없는 사원의 모든 정보를 조회한다.
SELECT *
  FROM EMPLOYEES e 
 WHERE EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID
                             FROM JOB_HISTORY)
;

-- 50. 직무가 변경된 사원의 과거 직무명과 현재 직무명을 조회한다.
-- 51. 직무가 가장 많이 변경된 부서의 이름을 조회한다.



-- 52. 'Seattle' 에서 근무중인 사원의 이름, 성, 연봉, 부서명 을 조회한다.
-- 모르는 것 : Seattle의 지역번호
-- SUB QUERY, INNER JOIN
-- 사원의 이름 성 연봉 부서명 >> EMPLOYEES+DEPARTMENT로 이름 성 연봉 부서명 가져올 수 있음
SELECT E.FIRST_NAME 
     , E.LAST_NAME 
     , E.SALARY 
     , D.DEPARTMENT_NAME
  FROM EMPLOYEES e 
 INNER JOIN DEPARTMENTS d
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
 INNER JOIN LOCATIONS l 
    ON D.LOCATION_ID = L.LOCATION_ID
 WHERE L.CITY = 'Seattle'
;    
 
-- 53. 'Seattle' 에서 근무하지 않는 모든 사원의 이름, 성, 연봉, 부서명, 도시를 조회한다.
SELECT E.FIRST_NAME 
     , E.LAST_NAME 
     , E.SALARY 
     , D.DEPARTMENT_NAME
  FROM EMPLOYEES e 
 INNER JOIN DEPARTMENTS d
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
 INNER JOIN LOCATIONS l 
    ON D.LOCATION_ID = L.LOCATION_ID
 WHERE L.CITY != 'Seattle'
;    

-- 54. 근무중인 사원이 가장 많은 도시와 사원의 수를 조회한다.  
-- INLINE VIEW 이용
-- 1. 도시명별 사원의 수를 조회
-- 2. 사원의 수로 내림차순 정렬
-- 3. 정렬된 데이터에서 첫 번째 ROW만 조회. (ROWNUM = 1)
SELECT *
  FROM (SELECT *
		  FROM (SELECT L.CITY
				     , COUNT(1) AS EMP_COUNT
				  FROM LOCATIONS l 
				 INNER JOIN DEPARTMENTS d 
				    ON L.LOCATION_ID = D.LOCATION_ID 
				 INNER JOIN EMPLOYEES e 
				    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
				 GROUP BY L.CITY) CITY_EMP_COUNT
 		 ORDER BY EMP_COUNT DESC) CITY_EMP_COUNT
 WHERE ROWNUM = 1
;

-- 55. 근무중인 사원이 없는 도시를 조회한다.
-- 도시를 베이스로 부서+사원을 LEFT OUTER JOIN을 할 것이다.
SELECT *
  FROM LOCATIONS l 
 WHERE LOCATION_ID IN (SELECT LOCATION_ID
                        FROM DEPARTMENTS D 
                       INNER JOIN EMPLOYEES E 
                          ON D.DEPARTMENT_ID = E.DEPARTMENT_ID)
;


-- 56. 연봉이 7000 에서 12000 사이인 사원이 근무중인 도시를 조회한다.
-- SUB QUERY
SELECT CITY 
  FROM LOCATIONS
 WHERE LOCATION_ID IN (SELECT LOCATION_ID 
 						 FROM DEPARTMENTS
 					    WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID
 					   						      FROM EMPLOYEES
 					   						     WHERE SALARY BETWEEN 7000 AND 12000))
;    



-- 57. 'Seattle' 에서 근무중인 사원의 직무명을 중복없이 조회한다.
SELECT J.JOB_TITLE
  FROM EMPLOYEES e 
 INNER JOIN DEPARTMENTS d
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
 INNER JOIN LOCATIONS l 
    ON D.LOCATION_ID = L.LOCATION_ID
 INNER JOIN JOBS j 
    ON E.JOB_ID = J.JOB_ID 
 WHERE L.CITY != 'Seattle'
 GROUP BY J.JOB_TITLE 
;    


-- 58. 사내의 최고연봉과 최저연봉의 차이를 조회한다.
-- 59. 이름이 'Renske' 인 사원의 연봉과 같은 연봉을 받는 사원의 모든 정보를 조회한다. 단, 'Renske' 사원은 조회에서 제외한다.
-- 60. 회사 전체의 평균 연봉보다 많이 받는 사원들 중 이름에 'u' 가 포함된 사원과 동일한 부서에서 근무중인 사원들의 모든 정보를 조회한다.
-- 61. 부서가 없는 국가명을 조회한다.
-- 국가명을 가져올 것이다. 그런데 부서가 없는
SELECT *
  FROM COUNTRIES c 
 WHERE COUNTRY_ID NOT IN (SELECT L.COUNTRY_ID
 						    FROM LOCATIONS l
 					       INNER JOIN DEPARTMENTS d 
 					          ON L.LOCATION_ID = D.LOCATION_ID)
;

-- 62. 'Europe' 에서 근무중인 사원들의 모든 정보를 조회한다.
-- 63. 'Europe' 에서 가장 많은 사원들이 있는 부서명을 조회한다.
-- ★★★ 우리가 안풀었던 문제가 있는데 그것 중에서 중요한 것을 말해주겠다.
-- 오늘 실습



-- 64. 대륙 별 사원의 수를 조회한다.
-- 65. 연봉이 2500, 3500, 7000 이 아니며 직업이 SA_REP 이나 ST_CLERK 인 사람들을 조회한다.


-- 66. 사원의 사원번호, 이름, 성, 상사의 사원번호, 상사의 이름, 상사의 성을 조회한다.
SELECT EMP.EMPLOYEE_ID
	 , EMP.FIRST_NAME
     , EMP.LAST_NAME
     , MAN.EMPLOYEE_ID 
     , MAN.FIRST_NAME 
     , MAN.LAST_NAME
  FROM EMPLOYEES EMP
 INNER JOIN EMPLOYEES MAN
    ON EMP.MANAGER_ID = MAN.EMPLOYEE_ID
;

-- 실습
-- 계층 실습
-- 100번 직원의 모든 부하직원들을 조회한다.
 SELECT LEVEL -- 계층의 깊이
      , E.EMPLOYEE_ID
      , E.MANAGER_ID
   FROM EMPLOYEES E
  START WITH EMPLOYEE_ID = 100
CONNECT BY PRIOR EMPLOYEE_ID = MANAGER_ID
;
 
-- 206번 직원의 모든 상사들을 조회한다.
 SELECT LEVEL 
 	  , e.*
   FROM EMPLOYEES e
  START WITH EMPLOYEE_ID = 206
CONNECT BY PRIOR MANAGER_ID = EMPLOYEE_ID


-- 67. 101번 사원의 모든 부하직원 들의 이름, 성, 상사사원번호을 조회한다.
 SELECT FIRST_NAME
 	  , LAST_NAME
 	  , MANAGER_ID
   FROM EMPLOYEES
  START WITH EMPLOYEE_ID = 101
CONNECT BY PRIOR EMPLOYEE_ID = MANAGER_ID
;

-- 68. 114번 직원의 모든 상사들의 이름, 성, 상사사원번호을 조회한다.
 SELECT FIRST_NAME
      , LAST_NAME
      , MANAGER_ID
   FROM EMPLOYEES
  START WITH EMPLOYEE_ID = 114
CONNECT BY PRIOR MANAGER_ID = EMPLOYEE_ID
;




-- 69. 114번 직원의 모든 상사들의 이름, 성, 상사사원번호, 상사사원명을 조회한다. 단, 역순으로 조회한다.
-- 70. 모든 사원들을 연봉 오름차순 정렬하여 조회한다.
SELECT *
  FROM EMPLOYEES
 ORDER BY SALARY 
;
-- 71. 모든 사원들을 이름 내림차순 정렬하여 조회한다.
SELECT *
  FROM EMPLOYEES
 ORDER BY FIRST_NAME DESC
;


-- 72. 모든 사원들의 이름, 성, 연봉, 부서명을 부서번호로 내림차순 정렬하여 조회한다.
SELECT E.FIRST_NAME 
     , E.LAST_NAME 
     , E.SALARY 
     , D.DEPARTMENT_NAME
  FROM EMPLOYEES e 
 INNER JOIN DEPARTMENTS d 
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
 ORDER BY D.DEPARTMENT_NAME 
;

-- 73. 부서명별 연봉의 합을 부서명으로 내림차순 정렬하여 조회한다.
SELECT D.DEPARTMENT_NAME
     , SUM(E.SALARY)
  FROM EMPLOYEES e 
 INNER JOIN DEPARTMENTS d 
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 GROUP BY D.DEPARTMENT_NAME
 ORDER BY D.DEPARTMENT_NAME DESC
;

-- 74. 직무명별 사원의 수를 직무명 오름차순 정렬하여 조회한다.
SELECT J.JOB_TITLE 
     , COUNT(1)
  FROM EMPLOYEES e
 INNER JOIN JOBS j
    ON E.JOB_ID = J.JOB_ID
 GROUP BY J.JOB_TITLE
 ORDER BY J.JOB_TITLE
;


-- 75. 모든 사원들의 모든 정보를 조회한다.
-- 	   단, 인센티브를 받는 사원은 "인센티브여부" 컬럼에 "Y"를, 아닌 경우 "N"으로 조회한다.
SELECT EMPLOYEE_ID
	 , FIRST_NAME
	 , LAST_NAME
	 , EMAIL
	 , PHONE_NUMBER
	 , HIRE_DATE
	 , JOB_ID
	 , SALARY
	 , COMMISSION_PCT
	 , MANAGER_ID
	 , DEPARTMENT_ID
	 , NVL2(COMMISSION_PCT, 'Y', 'N')
	 , CASE
	     WHEN COMMISSION_PCT IS NULL THEN 'N'
	     ELSE 'Y'
		END AS 인센티브_여부
     , CASE 
     	WHEN SALARY < 2500 THEN '사원'
     	WHEN SALARY < 5000 THEN '대리'
     	WHEN SALARY < 7500 THEN '과장'
     	ELSE '차장'
     END AS 직급
     , CASE EMPLOYEE_ID
     	WHEN 100 THEN '임원'
     	WHEN 101 THEN '임원 바로 아래'
     	ELSE '직원'
     END AS 임직원
  FROM EMPLOYEES
;  


-- 76. 모든 사원들의 이름을 10자리로 맞추어 조회한다.
-- LPAD() -- 사원의 이름을 10자리로 맞춘다. "ABC" --> "_______ABC"
-- DATA INSERT 할 때 매번 사용한다.
SELECT FIRST_NAME
     , LENGTH(FIRST_NAME)
     ,LPAD(FIRST_NAME, 10, '_')
     , RPAD(LPAD(FIRST_NAME, LENGTH (FIRST_NAME)+1, '%'), LENGTH(FIRST_NAME)+2, '%' )
  FROM EMPLOYEES
;




-- 77. 2007년에 직무가 변경된 사원들의 현재 직무명, 부서명, 사원번호, 이름, 성을 조회한다.
-- 78. 직무별 최대연봉보다 더 많은 연봉을 받는 사원의 모든 정보를 조회한다.
-- 79. 사원들의 입사일자 중 이름, 성, 연도만 조회한다.
-- 79. 입사일자 ==> 연도 변경, 이름 == FRIST_NAME, 성 = LAST_NAME
SELECT TO_CHAR(HIRE_DATE, 'YYYY')
     , FIRST_NAME
     , LAST_NAME
  FROM EMPLOYEES
;
-- 80. 사원들의 입사일자 중 이름, 성, 연도, 월 만 조회한다.
-- 80. 입사일자 ==> 연도-월 변경. 이름 == FIRST_NAME, 성 = LAST_NAME
--TODO
SELECT TO_CHAR(HIRE_DATE, 'YYYY-MM')
     , FIRST_NAME 
     , LAST_NAME
  FROM EMPLOYEES
;
-- 81. 100번 사원의 모든 부하직원을 계층조회한다. 단, LEVEL이 4인 사원은 제외한다.
-- 82. 많은 연봉을 받는 10명을 조회한다.
-- 오늘 실습
SELECT ROWNUM
     , EMP_1.*
  FROM (SELECT FIRST_NAME 
		     , SALARY
		  FROM EMPLOYEES e 
		 ORDER BY SALARY DESC) EMP_1 
 WHERE ROWNUM <= 10
;

-- 83. 가장 적은 연봉을 받는 사원의 상사명, 부서명을 조회한다.

-- 84. 많은 연봉을 받는 사원 중 11번 째 부터 20번째를 조회한다.
-- 사원 테이블의 정보를 연봉순으로 내림차순 정렬.
-- 11번 째부터 20번째까지 조회.
SELECT *
  FROM (SELECT ROWNUM AS R_NUM
     	     , EMP_1.*
		  FROM (SELECT *
  		  		  FROM EMPLOYEES
		  		 ORDER BY SALARY DESC) EMP_1
		 WHERE ROWNUM <= 20) EMP_2
 WHERE R_NUM >= 11
;

-- 85. 가장 적은 연봉을 받는 중 90번 째 부터 100번째를 조회한다.
-- 오늘 실습
-- ( (연봉 오름차순)을 이용해서 100번째까지 연봉 사원 테이블 )에서 90번째까지는 스킵
SELECT *
  FROM (SELECT ROWNUM R_NUM
	 		 , EMP_1.*
		  FROM (SELECT FIRST_NAME
		     		 , SALARY
				  FROM EMPLOYEES
				 ORDER BY SALARY) EMP_1
		 WHERE ROWNUM <= 100) EMP_2
 WHERE R_NUM >= 90
;

-- 86. (('PU_CLERK' 직무)인 2번째 부터 5번째) 사원의 부서명, 직무명을 조회한다.
-- 오늘 실습
-- 

SELECT EMP_1.FIRST_NAME
	 , D.DEPARTMENT_NAME
	 , J.JOB_TITLE
  FROM (SELECT ROWNUM R_NUM
		     , E.*
		  FROM EMPLOYEES e 
		 WHERE JOB_ID = 'PU_CLERK') EMP_1
 INNER JOIN JOBS j 
    ON EMP_1.JOB_ID = J.JOB_ID
 INNER JOIN DEPARTMENTS d 
    ON EMP_1.DEPARTMENT_ID = D.DEPARTMENT_ID
 WHERE R_NUM >= 2
   AND R_NUM <= 5
;

-- 87. 모든 사원의 정보를 직무 오름차순, 연봉 내림차순으로 조회한다.
SELECT *
  FROM EMPLOYEES
 ORDER BY JOB_ID
 	 , SALARY DESC
;

-- 2007년에 입사한 모든 사원들의 모든 정보를 조회한다.
-- 	일반적인 방법으로 해결한 경우
SELECT *
  FROM EMPLOYEES
 WHERE HIRE_DATE BETWEEN TO_DATE('2007-01-01', 'YYYY-MM-DD') AND TO_DATE('2007-12-31', 'YYYY-MM-DD')
;

SELECT EMPLOYEE_ID
     , FIRST_NAME
     , LAST_NAME
     , EMAIL
     , PHONE_NUMBER
     , JOB_ID
     , SALARY
     , COMMISSION_PCT
     , MANAGER_ID
     , DEPARTMENT_ID
  FROM (SELECT EMPLOYEE_ID
	   	     , FIRST_NAME
	 	     , LAST_NAME
	 	     , EMAIL
	 	     , PHONE_NUMBER
	 	     , TO_CHAR(HIRE_DATE, 'YYYY') HIRE_YEAR
	 	     , JOB_ID
	 	     , SALARY
	 	     , COMMISSION_PCT
	 	     , MANAGER_ID
	 	     , DEPARTMENT_ID
  	      FROM EMPLOYEES) EMPLOUYEES
 WHERE HIRE_YEAR = '2007' 
;

-- 88. 직무별 평균연봉을 평균연봉순으로 오름차순 정렬하여 조회한다.
SELECT JOB_TITLE
     , AVG_SALARY
  FROM (SELECT J.JOB_TITLE
		     , AVG(E.SALARY) AS AVG_SALARY
		  FROM JOBS J
		 INNER JOIN EMPLOYEES E
		    ON J.JOB_ID  = E.JOB_ID 
		 GROUP BY J.JOB_TITLE) JOB_AVG_SALARY
 ORDER BY AVG_SALARY
;

-- 89. 부서별 평균연봉을 내림차순 정렬하여 조회한다.
SELECT *
  FROM (SELECT D.DEPARTMENT_NAME
			 , AVG(E.SALARY) AVG_SALARY
		  FROM EMPLOYEES E
		 INNER JOIN DEPARTMENTS D
		    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
		 GROUP BY D.DEPARTMENT_NAME)
 ORDER BY AVG_SALARY DESC
;
-- 90. 이름의 첫 번째 글자별 평균연봉을 조회한다.
-- 91. 입사연도별 최소연봉을 조회한다.
-- 입사연도에 따른 연봉
SELECT HIRE_YEAR
	 , MIN(SALARY) AVG_SALARY
  FROM (SELECT TO_CHAR(HIRE_DATE, 'YYYY') HIRE_YEAR
	  	     , SALARY
  	      FROM EMPLOYEES)
 GROUP BY HIRE_YEAR
;

 
-- 92. 월별 최대연봉 중 2번째 부터 4번째 데이터만 조회한다.
-- 93. 직무명별 최소연봉을 조회한다.
-- 94. 부서명별 최대연봉을 조회한다.
-- 95. 직무명, 부서명 별 사원 수, 평균연봉을 조회한다.
-- 96. 도시별 사원 수를 조회한다.
-- 97. 국가별 사원 수, 최대연봉, 최소연봉을 조회한다.
-- 98. 대륙별 사원 수를 대륙명으로 오름차순 정렬하여 조회한다.
-- 99. 이름이나 성에 'A' 혹은 'a' 가 포함된 사원의 모든 정보를 조회한다.
-- 100. 국가별로 연봉이 5000 이상인 사원의 수를 조회한다.
-- 101. 인센티브를 안받는 사원이 근무하는 도시를 조회한다.
-- 102. 인센티브를 포함한 연봉이 10000 이상인 사원의 모든 정보를 조회한다.
-- 103. 가장 많은 부서가 있는 도시를 조회한다.
-- 104. 가장 많은 사원이 있는 부서의 국가명을 조회한다.
-- 105. 우편번호가 5자리인 도시에서 근무하는 사원명, 부서명, 도시명, 우편번호를 조회한다.
-- 106. 우편번호에 공백이 없는 도시에서 근무하는 사원의 이름, 부서명, 우편번호를 조회한다.
-- 107. "주"가 없는 도시에서 근무하는 사원의 이름, 도시를 조회한다.
-- 108. 국가명이 6자리인 국가의 모든 정보를 조회한다.
-- 109. 사원의 이름과 성을 이용해 EMAIL과 같은 값으로 만들어 조회한다.
-- 110. 모든 사원들의 이름을 10자리로 변환해 조회한다. 예> 이름 => "        이름"
-- 111. 모든 사원들의 성을 10자리로 변환해 조회한다. 예> 성 => "성         "
-- 112. 109번 사원의 입사일 부터 1년 내에 입사한 사원의 모든 정보를 조회한다.
-- 113. 가장 먼저 입사한 사원의 입사일로부터 2년 내에 입사한사원의 모든 정보를 조회한다.
-- 114. 가장 늦게 입사한 사원의 입사일 보다 1년 앞서 입사한 사원의 모든 정보를 조회한다.
-- 115. 도시명에 띄어쓰기 " " 가 포함된 도시에서 근무중인 사원들의 부서명, 도시명, 사원명을 조회한다.
-- 116. MOD 함수를 통해 사원번호가 홀수면 남자, 짝수면 여자 로 구분해 조회한다. MOD(값, 나눌값)
-- 117. '20230222' 문자 데이터를 날짜로 변환해 조회한다.(DUAL)
-- 118. '20230222' 문자 데이터를 'YYYY-MM' 으로 변환해 조회한다.(DUAL)
-- 119. '20230222130140' 문자 데이터를 'YYYY-MM-DD HH24:MI:SS' 으로 변환해 조회한다. (DUAL)
-- 120. '20230222' 날짜의 열흘 후의 날짜를 'YYYY-MM-DD' 으로 변환해 조회한다. (DUAL)
-- 121. 사원 이름의 글자수 별 사원의 수를 조회한다.
-- 122. 사원 성의 글자수 별 사원의 수를 조회한다.
-- 123. 사원의 연봉이 5000 이하이면 "사원", 7000 이하이면 "대리", 9000 이하이면 "과장", 그 외에는 임원 으로 조회한다.
-- CASE문으로 가능


-- 124. 부서별 사원의 수를 조인을 이용해 다음과 같이 조회한다."부서명 (사원의 수)"
-- 125. 부서별 사원의 수를 스칼라쿼리를 이용해 다음과 같이 조회한다. "부서명 (사원의 수)"
-- 126. 사원의 정보를 다음과 같이 조회한다. "사원번호 번 사원의 이름은 성이름 입니다."
-- 127. 사원의 정보를 스칼라쿼리를 이용해 다음과 같이 조회한다. "사원번호 번 사원의 상사명은 상사명 입니다."
-- 128. 사원의 정보를 조인을 이용해 다음고 같이 조회한다. "사원명 (직무명)"
-- 129. 사원의 정보를 스칼라쿼리를 이용해 다음과 같이 조회한다. "사원명 (직무명)"
-- 130. 부서별 연봉 차이(최고연봉 - 최저연봉)가 가장 큰 부서명을 조회한다.
-- 131. 부서별 연봉 차이(최고연봉 - 최저연봉)가 가장 큰 부서에서 근무하는 사원들의 직무명을 중복없이 조회한다.
-- 132. 부서장이 없는 부서명 중 첫 글자가 'C' 로 시작하는 부서명을 조회한다.
-- 133. 부서장이 있는 부서명 중 첫 글자가 'S' 로 시작하는 부서에서 근무중인 사원의 이름과 직무명, 부서명을 조회한다.
-- 134. 지역변호가 1000 ~ 1999 사이인 지역내 부서의 모든 정보를 조회한다.
-- 135. 90, 60, 100번 부서에서 근무중인 사원의 이름, 성, 부서명을 조회한다.
-- 136. 부서명이 5글자 미만인 부서에서 근무중인 사원의 이름, 부서명을 조회한다.
-- 137. 국가 아이디가 'C'로 시작하는 국가의 지역을 모두 조회한다.
-- 138. 국가 아이디의 첫 글자와 국가명의 첫 글자가 다른 모든 국가를 조회한다.
-- 139. 사원 모든 정보 중 이메일만 모두 소문자로 변경하여 조회한다.
-- 140. 사원의 연봉을 TRUNC(소수점 버림) 함수를 사용해 100 단위는 버린채 다음과 같이 조회한다. 예> 3700 -> 3000, 12700 -> 12000
-- 141. 100단위를 버린 사원의 연봉 별 사원의 수를 조회한다.
-- 142. 현재 시간으로부터 20년 전 보다 일찍 입사한 사원의 모든 정보를 조회한다.
-- 143. 부서번호별 현재 시간으로부터 15년 전 보다 일찍 입사한 사원의 수를 조회한다.
-- 144. 부서명, 직무명 별 평균 연봉을 조회한다.
-- 145. 도시명, 지역명 별 사원의 수를 조회한다.
-- 146. 부서명, 직무명 별 평균 연봉 중 가장 작은 평균연봉을 받는 부서명, 직무명을 조회한다.
-- 147. 102번 직원의 모든 부하직원의 수를 조회한다.
-- 148. 113번 직원의 모든 부하직원의 수를 조회한다.
-- 149. 부하직원이 없는 사원의 모든 정보를 조회한다.
-- 150. 사원번호가 100번인 사원의 사원번호, 이름과 사원번호로 내림차순 정렬된 사원의 사원번호, 이름 조회한다.
/*조회 예----------------------
100    Steven
206    William
205    Shelley
204    Hermann
203    Susan
202    Pat
201    Michael
200    Jennifer
199    Douglas
198    Donald
197    Kevin
196    Alana
...
*/

-- 151. 모든 사원의 모든 정보를 조회한다.
-- 152. 부서가 없는 사원의 모든 정보를 조회한다.
-- 153. 직무가 없는 사원의 모든 정보를 조회한다.
-- 154. 부서와 직무가 모두 있는 사원의 모든 정보를 조회한다.
-- 155. 부서장이 없는 모든 부서의 모든 정보를 조회한다.
-- 156. 부서장이 있는 모든 부서의 모든 정보를 조회한다.
-- 157. 부서장의 모든 사원 정보를 조회한다.
-- 158. 사원의 이름만 조회한다.
-- 159. 사원의 이름이 7자리인 사원의 모든 정보를 조회한다.
-- 160. 사원의 이메일이 6자리인 사원의 모든 정보를 조회한다.
-- 161. 모든 지역의 모든 정보를 조회한다.
-- 162. 지역이 없는 모든 부서의 정보를 조회한다.
-- 163. 지역이 있는 모든 부서의 정보와 도시 정보를 조회한다.
-- 164. 모든 사원의 모든 정보와 부서명을 조회한다.
-- 165. 111번 사원의 모든 정보와 부서명을 조회한다.
-- 166. 115번의 사원의 모든 정보와 부서명, 직무명을 조회한다.
-- 167. 100번 사원의 모든 정보와 부서명, 직무명, 도시명을 조회한다.
-- 168. 부서아이디별 사원의 평균연봉을 조회한다.
-- 169. 직무아이디별 사원의 최고연봉을 조회한다.
-- 170. 부서명별 사원의 수를 조회한다.
-- 171. 직무명별 사원의 평균연봉을 조회한다.
-- 172. 부서명, 직무명별 사원의 수와 평균연봉을 조회한다.
-- 173. 인센티브를 안받는 사원의 모든 정보를 조회한다.
-- 174. 인센티브를 받는 사원의 부서아이디를 중복없이 조회한다.
-- 175. 인센티브를 받는 사원의 직무아이디를 중복없이 조회한다.
-- 176. 사원이 있는 부서의 지역아이디를 조회한다.
-- 177. 사원이 없는 부서의 부서명을 조회한다.


-- 178. 지역별 부서의 수를 조회한다. (부서가 없으면 부서의 수는 0으로 조회한다.)
/*
 * 도시명		| 부서의 수
 * Seattle	| 12
 * Seoul	| 0
 * London	| 3
 */

SELECT L.CITY 
     , COUNT(D.LOCATION_ID) AS DEPT_COUNT
  FROM LOCATIONS l 
  LEFT OUTER JOIN DEPARTMENTS d
    ON L.LOCATION_ID = D.LOCATION_ID
 GROUP BY L.CITY
;


-- 179. 도시명별 사원의 평균연봉을 조회한다. (사원이 없으면 평균연봉은 0으로 조회한다.)
SELECT L.CITY 
     , NVL(AVG(E.SALARY), 0) AS AVG_SALARY
  FROM LOCATIONS l 
  LEFT OUTER JOIN DEPARTMENTS d
    ON L.LOCATION_ID = D.LOCATION_ID 
  LEFT OUTER JOIN EMPLOYEES e
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
 GROUP BY L.CITY
;

-- NULL VALUE : NVL(NULL가능성이 있는 컬럼, 기본값)
--  컬럼의 값이 NULL 일 때 기본값으로 조회시킨다.


-- 180. Seattle의 부서 아이디를 조회한다.
-- 181. Seattle에서 근무중인 사원의 모든 직무명을 중복없이 조회한다.
-- 182. 사원이 한명도 없는 도시를 조회한다.
-- 183. 사원이 한명이라도 있는 도시를 조회한다.
-- 184. 모든 사원의 정보를 연봉으로 오름차순 정렬하여 조회한다.
-- 185. 부서명별 평균연봉을 부서명으로 내림차순 정렬하여 조회한다.
-- 186. 부서명별 최고연봉을 최고연봉으로 오름차순 정렬하여 조회한다.
-- 187. 부서명이 가장 긴 부서에서 근무중인 사원의 모든 정보를 조회한다.
-- 188. 도시명 별 사원의 수를 도시명으로 오름차순 정렬하여 조회한다.
-- 189. 모든 사원의 사원번호, 이름, 성, 연봉, 인센티브를 포함한 연봉 정보를 조회한다.
-- 190. 매년 10%의 상여금을 받는다고 했을 때, 사원별로 현재까지 받은 상여금의 합과 사원번호, 연봉을 조회한다.
-- 191. 직무가 변경되었던 사원들의 모든 정보를 조회한다.
-- 192. 모든 사원들의 현재 직무명과 과거의 직무명을 조회한다. 만약 직무가 한번도 변경되지 않았다면, 과거의 직무명은 '없음' 으로 조회한다.
-- 193. 직무가 변경될 때마다 연봉이 15% 감소한다고 했을 때, 직무가 변경된 사원들의 감소된 연봉을 조회한다.
-- 194. 2003년에 입사한 사원은 몇 명인지 조회한다.
-- 195. 2002년부터 2006년까지 입사한 사원은 몇명인지 연도별로 조회한다.
-- 196. 113번 사원의 상사의 모든 정보를 조회한다.
-- 197. 100번 사원의 모든 부하직원을 계층조회한다.
-- 198. 113번 사원의 모든 상사를 계증조회한다.
-- 199. IT 부서장의 모든 부하직원을 계층조회한다.
-- 200. 모든 부서의 부서장들의 부하직원을 계층조회한다.
