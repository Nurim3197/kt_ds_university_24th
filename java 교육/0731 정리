# 0731 교육내용
## File I/O
 I/O(input/output) = 파일 읽기/쓰기를 말한다.

close()를 이용하는 이유는 Java App과 FileSystem이 통신을 하면서 파이프(입출력에서는 Reader 등)를 사용하는데, 사용이 끝나면 자원의 낭비(메모리 누수)를 예방하기 위해서 close하는 것이다.
 파이프를 여는 순서의 역순으로 close()한다.

교재의 내용으로 하면 너무 길어서 잘못쓸 수도 있으니 실무에서는 추상클래스를 만들어 사용한다.

split()는 정규표현식으로 작동하기 때문에 백슬래쉬를 두 번(\\) 사용하여 파이프(|)를 기준으로 자를 수 있다.

정규표현식에서 "(010|011|016|017|019)-[0-9]+{3,4}-[0-9]+{4}"은 010, 011, 016,017, 019로 시작하며 중간 0-9숫자 3자리이상 4자리 이하 , 마지막 자리는 0-9범위의 숫자 4자리라는 것을 뜻한다.

재귀호출은 무한으로 사용할 수 있는 것처럼 보이지만 callStack이 쌓을 수 있을만큼 쌓이면 그만 출력한다.
[멀티쓰레드 환경에서 CPU Idle 타임을 모두 독점한다.] << 일단 웹 개발에서는 파일탐색을 하는경우나 배치를 개발하는 경우가 아니라면 쓰면 안된다.

재귀호출을 사용하는 Ex. 파일 탐색기를 사용할 때 원하는 파일이 얼마나 깊은 폴더에 있는지 모르기에 폴더에 들어가고 들어가고 하면서 파일의 위치를 찾는다.

파일을 한줄씩 읽는 것(1.8버전 이전)과 한번에 메모리로 가져오는 것(1.8 이후)를 둘 다 알려주신 이유는 상황에 따라서 쓰임이 다르기 때문이다.
만약 1GB나 되는 파일을 읽는다고 하면 인스턴스까지 생성하느라 2GB의 메모리를 사용하게 된다. 이렇게 메모리를 많이 사용하게 되는 경우를 막기 위해서
한줄씩 읽는 것이다.
